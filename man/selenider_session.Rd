% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/session.R
\name{selenider_session}
\alias{selenider_session}
\title{Start a session}
\usage{
selenider_session(
  session = NULL,
  browser = NULL,
  view = FALSE,
  timeout = 4,
  driver = NULL,
  local = TRUE,
  quiet = TRUE,
  .env = rlang::caller_env(),
  extra_args = list()
)
}
\arguments{
\item{session}{The package to use as a backend: either "chromote" or
"selenium".}

\item{browser}{The name of the browser to run the session in; one of
"chrome", "firefox", "phantomjs" or "internet explorer" (only on
Windows). IF \code{NULL}, the function will try to work out which browser
you have installed.}

\item{view}{Whether to open the browser and view it, for visual testing.
This is ignored if session is "selenium", since selenium drivers cannot
be headless.}

\item{timeout}{The default time to wait when collecting an element.}

\item{driver}{A driver object to use instead of creating one manually.}

\item{local}{Whether to set the session as the local session object,
using \code{\link[=local_session]{local_session()}}.}

\item{quiet}{Whether to let \code{\link[RSelenium:rsDriver]{RSelenium::rsDriver()}} display messages. By
default, this output is suppressed, as it is not usually useful.}

\item{.env}{Passed into \code{\link[=local_session]{local_session()}} function, to define the
environment in which the session is used. Change this if you want to
create the session inside a function and then use it outside the
function.}

\item{extra_args}{A list of arguments to pass into \code{\link[RSelenium:remoteDriver-class]{RSelenium::remoteDriver()}}
and \code{\link[wdman:selenium]{wdman::selenium()}} if Selenium is used, or
\code{\link[chromote:ChromoteSession]{chromote::ChromoteSession$new()}} if chromote is used.}
}
\value{
A \code{selenider_session} object.
}
\description{
Begin a session in selenider, setting the session globally unless otherwise
specified.
}
\details{
\code{selenider_session()} uses \code{\link[RSelenium:rsDriver]{RSelenium::rsDriver()}} to create a browser
session. It then uses withr to set the session locally (unless otherwise
specified). To reset the local session object, use \code{\link[withr:defer]{withr::deferred_run()}}.
}
\examples{
\dontshow{if (selenider_available()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

session_1 <- selenider_session(timeout = 10)
# session_1 is the local session here

get_session() # Returns session 1

\dontshow{
# Clean up all connections and invalidate default chromote object
selenider_cleanup()
}

my_function <- function() {
  session_2 <- selenider_session()

  # In here, session_2 is the local session
  get_session()
  \dontshow{
  # Clean up all connections and invalidate default chromote object
  selenider_cleanup()
  }
} # When the function finishes executing, the session is closed

my_function() # Returns `session_2`

# If we want to use a session outside the scope of a function,
# we need to use the `.env` argument.
create_session <- function(timeout = 10, .env = rlang::caller_env()) {
  # caller_env() is the environment where the function is called
  selenider_session(timeout = timeout, .env = .env)
}

my_session <- create_session()

# We can now use this session outside the `create_session()` function
get_session()

# `my_session` will be closed automatically.

\dontshow{
# Clean up all connections and invalidate default chromote object
selenider_cleanup()
}
\dontshow{\}) # examplesIf}
}
\seealso{
\itemize{
\item \code{\link[=close_session]{close_session()}} to close the session. Note that this will not reset the
result of \code{\link[=get_session]{get_session()}}, which is why \code{\link[withr:defer]{withr::deferred_run()}} is preferred.
\item \code{\link[=local_session]{local_session()}} and \code{\link[=with_session]{with_session()}} to manually set the local session
object.
}
}
