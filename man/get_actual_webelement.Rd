% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_actual_element.R
\name{get_actual_webelement}
\alias{get_actual_webelement}
\alias{get_actual_webelements}
\title{Get the webElement associated with a selenium element}
\usage{
get_actual_webelement(x, timeout = NULL)

get_actual_webelements(x)
}
\arguments{
\item{x}{A \code{selenider_element} or \code{selenider_elements} object, produced by
\code{\link[=html_element]{html_element()}} / \code{\link[=html_elements]{html_elements()}}}

\item{timeout}{The timeout to use while asserting that the item exists. If
NULL, the timeout of the \code{selenider_element} will be used.}
}
\value{
A \link[RSelenium:webElement-class]{RSelenium::webElement} object, or a list of such objects.
}
\description{
Turn a lazy selenium element or element collection into a
\link[RSelenium:webElement-class]{RSelenium::webElement}. Use this to perform certain actions on the element
that are not implemented in selenider (e.g. getElementLocation())

\code{get_actual_webelement()} turns a \code{selenider_element} object into a
\link[RSelenium:webElement-class]{RSelenium::webElement} object. The function will wait for the object to
exist in the DOM.

\code{get_actual_webelements()} turns a \code{selenider_elements} object into a list
of \link[RSelenium:webElement-class]{RSelenium::webElement} objects.
}
\examples{
session <- mock_selenider_session()

elem <- s(".class1") |>
  get_actual_webelement()

elem$getElementLocation()

elems <- ss(".class2") |>
  get_actual_webelements()

elems[[1]]$getElementSize()

}
\seealso{
\itemize{
\item \code{\link[=s]{s()}}, \code{\link[=ss]{ss()}}, \code{\link[=html_element]{html_element()}} and \code{\link[=html_elements]{html_elements()}} to select selenider
elements
\item The documentation for \code{\link[RSelenium:webElement-class]{RSelenium::webElement()}} to see the things you can
do with them.
}
}
