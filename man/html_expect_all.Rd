% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expect_all.R
\name{html_expect_all}
\alias{html_expect_all}
\alias{html_wait_until_all}
\title{Test conditions on multiple elements}
\usage{
html_expect_all(x, ..., timeout = NULL)

html_wait_until_all(x, ..., timeout = NULL)
}
\arguments{
\item{x}{A \code{selenider_elements()} object.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> Function calls or functions
that must return a logical value. If multiple conditions are given, they
must all be \code{TRUE} for the test to pass. See \code{\link[=html_expect]{html_expect()}} for more
details.}

\item{timeout}{The number of seconds to wait for a condition to pass. If not
specified, the timeout used for \code{x} will be used, or the timeout of the
local session if an element is not given.}
}
\value{
\code{html_expect_all()} returns the elements \code{x}, or \code{NULL} if an element or
collection of elements was not given in \code{x}.

\code{html_wait_until_all()} returns a boolean flag: TRUE if the test passes, FALSE
otherwise.
}
\description{
\code{html_expect_all()} and \code{html_wait_until_all()} are complements to
\code{\link[=html_expect]{html_expect()}} and \code{\link[=html_wait_until]{html_wait_until()}} that test conditions on
multiple elements in an element collection.
}
\details{
If \code{x} does not contain any elements, \code{html_expect_all()} and
\code{html_wait_until_all()} will succeed. You may want to first verify that
at least one element exists with \code{\link[=has_at_least]{has_at_least()}}.

\code{html_expect_all()} and \code{html_wait_until_all()} can be thought of as alternatives
to the use of \code{all(vapply(FUN.VALUE = logical(1)))} (or \code{\link[purrr:every]{purrr::every()}})
within \code{\link[=html_expect]{html_expect()}} and \code{\link[=html_wait_until]{html_wait_until()}}.

For example, the following two expressions are equivalent (where \code{x} is an
element collection).

\if{html}{\out{<div class="sourceCode">}}\preformatted{html_expect(x, \\(element) all(vapply(element, is_present, logical(1))))
html_expect_all(x, is_present)
}\if{html}{\out{</div>}}

However, the second example will give a more detailed error message on failure.
}
\examples{
session <- mock_selenider_session()

ss(".class1") |>
  html_expect_all(is_present)

}
\seealso{
\itemize{
\item \code{\link[=html_expect]{html_expect()}} and \code{\link[=html_wait_until]{html_wait_until()}}
\item \code{\link[=is_present]{is_present()}} and other conditions for predicates for a single HTML element.
}
}
