% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api.R
\name{s}
\alias{s}
\alias{ss}
\title{Quickly select HTML elements}
\usage{
s(
  css = NULL,
  xpath = NULL,
  id = NULL,
  class_name = NULL,
  name = NULL,
  link_text = NULL
)

ss(
  css = NULL,
  xpath = NULL,
  id = NULL,
  class_name = NULL,
  name = NULL,
  link_text = NULL
)
}
\arguments{
\item{css}{A css selector.}

\item{xpath}{An XPath.}

\item{id}{The id of the element you want to select.}

\item{class_name}{The class name of the element you want to select.}

\item{name}{The name attribute of the element you want to select.}

\item{link_text}{The link text of the link element that you would like to
select.}
}
\value{
\code{s()} returns a \code{selenider_element} object.
\code{s()} returns a \code{selenider_elements} object.
}
\description{
Both \code{s()} and \code{ss()} allow you to select elements without specifying a
session object.

\code{s()} selects a single element, being a shorthand for \code{\link[=html_element]{html_element()}}
without a first argument

\code{ss()} selects multiple elements, being a shorthand for \code{\link[=html_elements]{html_elements()}}.
}
\details{
Both functions allow the starting point for chains of selectors to be made
more concise. Both use \code{\link[=get_session]{get_session()}} to get the global session object.
}
\examples{
session <- mock_selenider_session()

s(".class1")

# This is the equivalent of:
html_element(session, ".class1")

ss(".class2")

# This is the equivalent of:
html_element(session, ".class2")

# This provides a more concise way to begin a chain of selectors
s(".class1") |>
  html_element(".innerclass") |>
  html_element("#item1")
\dontshow{
options(prev_options)
}

}
\seealso{
\itemize{
\item \code{\link[=html_element]{html_element()}} and \code{\link[=html_elements]{html_elements()}}
\item \code{\link[=selenider_session]{selenider_session()}} to begin a session.
}
}
